{"version":3,"file":"index.esm.js","sources":["../node_modules/@x-drive/utils/dist/index.esm.js","../src/index.ts"],"sourcesContent":["/**\r\n * 数据类型判断\r\n * @param  subject 待判断的数据\r\n * @param  type    数据类型名字\r\n * @return         判断结果\r\n */\r\nfunction is(subject, type) {\r\n    return Object.prototype.toString.call(subject).substr(8, type.length).toLowerCase() === type;\r\n}\n\n/**\r\n * 是否是数组\r\n * @param  subject 待判断的数据\r\n */\r\nfunction isObject(subject) {\r\n    return is(subject, \"object\");\r\n}\n\n/**\r\n * 是否 undefined\r\n * @param  subject 待判断的数据\r\n */\r\nfunction isUndefined(subject) {\r\n    return is(subject, \"undefined\");\r\n}\n\n/**\r\n * 带花括号标签检测正则\r\n * @type {RegExp}\r\n */\r\nvar labelReplaceExp = /\\{(\\w+)\\}/g;\r\n/**\r\n * 批量替换字符串中带花括号标签为指定数据\r\n * @param  tpl  待处理的字符串\r\n * @param  data 替换数据\r\n * @param  keep 是否保留未能解析的标签\r\n * @return      替换后端字符串\r\n * @example\r\n * ```tsx\r\n * labelReplace('{a}/{b}/c', {a: 1, b: 2}) // 1/2/c\r\n * labelReplace('{a}/{b}/c', {a: 1}, true) // 1/{b}/c\r\n * ```\r\n */\r\nfunction labelReplace(tpl, data, keep) {\n    if ( keep === void 0 ) keep = false;\n\r\n    return tpl.replace(labelReplaceExp, function (_, key) {\r\n        var re = isObject(data) ? data[key] : data;\r\n        if (isUndefined(re) && keep) {\r\n            return _;\r\n        }\r\n        return re;\r\n    });\r\n}\n\n/**\r\n * 是否是数组且长度大于0\r\n * @param  subject 待判断的数据\r\n */\r\nfunction isValidArray(subject) {\r\n    return Array.isArray(subject) && subject.length > 0;\r\n}\n\n/**\r\n * 伪数组转成数组\r\n * @param   args 伪数组对象\r\n * @return       转化后的数组\r\n */\r\nfunction toArray(args) {\r\n    return Array.prototype.slice.call(args);\r\n}\n\n/**\r\n * 是否是函数\r\n * @param  subject 待判断的数据\r\n */\r\nfunction isFunction(subject) {\r\n    return is(subject, \"function\");\r\n}\n\n/**\r\n * 是否是数组\r\n * @param  subject 待判断的数据\r\n */\r\nfunction isArray(subject) {\r\n    return Array.isArray(subject);\r\n}\n\n/**\r\n * 通用遍历函数\r\n * @param  data    待遍历数据\r\n * @param  handler 处理函数\r\n * @param  context 作用域\r\n */\r\nfunction each(data, handler, context) {\r\n    context = context || this;\r\n    var hasHandler = isFunction(handler);\r\n    if (isArray(data)) {\r\n        for (var i = 0; i < data.length; i++) {\r\n            var re = true;\r\n            if (hasHandler) {\r\n                re = handler.call(context, data[i], i);\r\n            }\r\n            if (re === false) {\r\n                break;\r\n            }\r\n        }\r\n    }\r\n    else if (isObject(data)) {\r\n        var keys = Object.keys(data);\r\n        for (var i$1 = 0; i$1 < keys.length; i$1++) {\r\n            var re$1 = true;\r\n            if (hasHandler) {\r\n                re$1 = handler.call(context, data[keys[i$1]], keys[i$1]);\r\n            }\r\n            if (re$1 === false) {\r\n                break;\r\n            }\r\n        }\r\n    }\r\n}\n\n/**\r\n * 对象扩展方法\r\n * @return 合并后的对象\r\n */\r\nfunction extend() {\r\n    var args = toArray(arguments);\r\n    var dat = args.shift();\r\n    if (dat) {\r\n        if (args.length) {\r\n            while (args.length) {\r\n                var item = args.shift();\r\n                if (item) {\r\n                    each(item, function (val, key) {\r\n                        dat[key] = val;\r\n                    });\r\n                }\r\n            }\r\n        }\r\n        return dat;\r\n    }\r\n    return null;\r\n}\n\n/**\r\n * 合并\r\n * @param target  合并基准对象\r\n * @param sources 后续合并对象\r\n */\r\nfunction merge(target) {\n    var obj, obj$1;\n\n    var sources = [], len = arguments.length - 1;\n    while ( len-- > 0 ) sources[ len ] = arguments[ len + 1 ];\r\n    if (!sources.length)\r\n        { return target; }\r\n    var source = sources.shift();\r\n    if (isObject(target) && isObject(source)) {\r\n        for (var key in source) {\r\n            if (isObject(source[key])) {\r\n                if (!target[key]) {\r\n                    Object.assign(target, ( obj = {}, obj[key] = {}, obj ));\r\n                }\r\n                merge(target[key], source[key]);\r\n            }\r\n            else {\r\n                Object.assign(target, ( obj$1 = {}, obj$1[key] = source[key], obj$1 ));\r\n            }\r\n        }\r\n    }\r\n    return merge.apply(void 0, [ target ].concat( sources ));\r\n}\n\n/**\r\n * 是否是字符串\r\n * @param  subject 待判断的数据\r\n */\r\nfunction isString(subject) {\r\n    return is(subject, \"string\");\r\n}\n\n/**\r\n * 大写字母匹配正则\r\n */\r\nvar UPPER_CASE_REGEXP = /[A-Z]/g;\r\n/**\r\n * 转化为蛇形命名\r\n * @param  str 待处理的字符串\r\n * @return     处理后的字符串\r\n */\r\nfunction toUnderlineName(str) {\r\n    if (isString(str)) {\r\n        return str.replace(UPPER_CASE_REGEXP, function (m, i) { return (\"\" + (i ? '_' : '') + (m.toLowerCase())); });\r\n    }\r\n    return str;\r\n}\n\n/**\r\n * 简单复制\r\n * @param  item 原始数据\r\n * @return      复制后的数据\r\n */\r\nfunction copy(item) {\r\n    return JSON.parse(JSON.stringify(item));\r\n}\n\n/**\r\n * 格式化数字, 自动补0前续\r\n * @param  number 要格式化的数字\r\n * @param  size   格式化后出来的数字位数\r\n * @return        格式化结果\r\n */\r\nfunction fix0(number, size) {\r\n    number = number.toString();\r\n    while ((number).length < size) {\r\n        number = '0' + number;\r\n    }\r\n    return number;\r\n}\n\n/**\r\n * 是否是数字\r\n * @param  subject 待判断的数据\r\n */\r\nfunction isNumber(subject) {\r\n    return !isNaN(subject) && is(subject, \"number\");\r\n}\n\n/**\r\n * 是否是 null\r\n * @param  subject 待判断的数据\r\n */\r\nfunction isNull(subject) {\r\n    return is(subject, \"null\");\r\n}\n\n/**\r\n * 按位数格式化数字\r\n * @param  val       要格式化的数字\r\n * @param  separator 分割符\r\n * @param  size      分割位数间隔\r\n * @return           格式化完的字符串\r\n */\r\nfunction numberFormat(val, separator, size) {\r\n    if (!isNumber(val)) {\r\n        return \"0\";\r\n    }\r\n    if (isUndefined(separator) || isNull(separator)) {\r\n        separator = \",\";\r\n    }\r\n    if (!isNumber(size)) {\r\n        size = 3;\r\n    }\r\n    var last = size;\r\n    val = val.toString();\r\n    var pos = val.indexOf(\".\");\r\n    var res = \"\";\r\n    if (pos === -1) {\r\n        pos = val.length;\r\n    }\r\n    else {\r\n        res = val.substr(pos);\r\n    }\r\n    if (val.charAt(0) === \"-\") {\r\n        last++;\r\n    }\r\n    while (pos > last) {\r\n        pos -= size;\r\n        res = separator + val.substr(pos, size) + res;\r\n    }\r\n    if (pos) {\r\n        res = val.substr(0, pos) + res;\r\n    }\r\n    return res;\r\n}\n\n/**\r\n * 数组随机分布\r\n * @param  arr  原始数组\r\n * @return      打乱后的数组\r\n */\r\nfunction shuffle(arr) {\r\n    for (var i = arr.length - 1; i >= 0; i--) {\r\n        var rIndex = Math.floor(Math.random() * (i + 1));\r\n        var item = arr[rIndex];\r\n        arr[rIndex] = arr[i];\r\n        arr[i] = item;\r\n    }\r\n    return arr;\r\n}\n\n/**\r\n * 获取包含指定范围内的随机数\r\n * @param  max 最大范围(包含)\r\n * @param  min 最小范围(包含，默认 0)\r\n * @return     随机数\r\n */\r\nfunction random(max, min) {\r\n    if (min === undefined) {\r\n        min = 0;\r\n    }\r\n    return Math.round(Math.random() * (max - min) + min);\r\n}\n\n/**\r\n * 序列化请求参数\r\n * @param  query 参数对象\r\n * @return       参数字符串\r\n */\r\nfunction serialize(query, encode) {\n    if ( encode === void 0 ) encode = false;\n\r\n    return Object.keys(query)\r\n        .map(function (key) { return (key + \"=\" + (encode ? encodeURIComponent(query[key]) : query[key])); })\r\n        .join('&');\r\n}\n\n/**\r\n * 请求参数对象转成请求参数字符串\r\n * @param dat 请求参数\r\n */\r\nfunction queryString(dat) {\r\n    var queryStr;\r\n    if (dat) {\r\n        queryStr = Object.keys(dat)\r\n            .map(function (key) {\r\n            return (key + \"=\" + (encodeURIComponent(dat[key])));\r\n        })\r\n            .join('&');\r\n    }\r\n    else {\r\n        queryStr = '';\r\n    }\r\n    return queryStr;\r\n}\n\n/**\r\n * 时间分割正则\r\n */\r\nvar DATE_REGEXP = /[^\\d]+/;\r\n/**\r\n * 转换对象为JS Date对象\r\n * @param   date   <可选> 日期数据(时间戳, 字符串, Date对象, 空)\r\n * @param   offset 修正偏移的秒数\r\n * @return         返回JS Date对象 / NULL 日期格式错误\r\n */\r\nfunction toDate(date, offset) {\r\n    var ts;\r\n    if (date instanceof Date) {\r\n        ts = date;\r\n    }\r\n    else if (isNumber(date)) {\r\n        ts = new Date(date);\r\n    }\r\n    else if (isNaN(+date)) {\r\n        if (isString(date)) {\r\n            date = date.split(DATE_REGEXP);\r\n            if (date.length === 3) {\r\n                ts = new Date(+date[0], date[1] - 1, +date[2], 0, 0, 0, 0);\r\n                if (isNaN(+ts)) {\r\n                    ts = null;\r\n                }\r\n            }\r\n        }\r\n        else {\r\n            return null;\r\n        }\r\n    }\r\n    if (!ts) {\r\n        if (!date) {\r\n            return null;\r\n        }\r\n        ts = new Date();\r\n        if (date > 5e8) {\r\n            // 时间戳\r\n            ts.setTime(date * 1000);\r\n        }\r\n        else {\r\n            // 时间偏移(秒数)\r\n            ts.setTime(ts.getTime() + date * 1000);\r\n        }\r\n    }\r\n    if (!isNaN(Number(offset))) {\r\n        ts.setTime(ts.getTime() + offset * 1000);\r\n    }\r\n    return ts;\r\n}\n\n/**\r\n * 日期格式化格式匹配正则\r\n */\r\nvar FORMAT_REGEXP = /[YymndjNwaAghGHisT]/g;\r\n/**\r\n * 按照指定格式将日期对象或时间戳转化为日期字符串\r\n * @param  date   日期对象或时间戳\r\n * @param  format 日期格式\r\n * @param  offset 修正偏移的秒数\r\n * @return        日期\r\n */\r\nfunction date(date, format, offset) {\r\n    format = format || \"Y-m-d H:i:s\";\r\n    var timestamp = toDate(date, offset);\r\n    if (timestamp === null) {\r\n        timestamp = new Date();\r\n    }\r\n    return format.replace(FORMAT_REGEXP, function formatCallback(tag) {\r\n        switch (tag) {\r\n            case \"Y\": return timestamp.getFullYear();\r\n            case \"y\": return timestamp.getFullYear() % 100;\r\n            case \"m\": return fix0(timestamp.getMonth() + 1, 2);\r\n            case \"n\": return timestamp.getMonth() + 1;\r\n            case \"d\": return fix0(timestamp.getDate(), 2);\r\n            case \"j\": return timestamp.getDate();\r\n            case \"N\": return timestamp.getDay();\r\n            case \"w\": return timestamp.getDay() % 7;\r\n            case \"a\": return timestamp.getHours() < 12 ? \"am\" : \"pm\";\r\n            case \"A\": return timestamp.getHours() < 12 ? \"AM\" : \"PM\";\r\n            case \"g\": return timestamp.getHours() % 12 + 1;\r\n            case \"h\": return fix0(timestamp.getHours() % 12 + 1, 2);\r\n            case \"G\": return timestamp.getHours();\r\n            case \"H\": return fix0(timestamp.getHours(), 2);\r\n            case \"i\": return fix0(timestamp.getMinutes(), 2);\r\n            case \"s\": return fix0(timestamp.getSeconds(), 2);\r\n            case \"T\": return Math.round(timestamp.getTime() / 1000);\r\n        }\r\n        return tag;\r\n    });\r\n}\n\n/**\r\n * 是否是正则\r\n * @param subject 待判断数据\r\n */\r\nfunction isRegexp(subject) {\r\n    return is(subject, \"regexp\");\r\n}\n\n/**\r\n * 是否是错误对象\r\n * @param subject 待判断数据\r\n */\r\nfunction isError(subject) {\r\n    return is(subject, \"error\");\r\n}\n\n/**\r\n * 是否是布尔值\r\n * @param  subject 待判断的数据\r\n */\r\nfunction isBoolean(subject) {\r\n    return is(subject, \"boolean\");\r\n}\n\n/**\r\n * 浮点数字精度处理\r\n * @param  num   待处理数字\r\n * @param  dec   精度\r\n * @return       处理后的数字\r\n */\r\nfunction getNumberWithDec(num, dec) {\r\n    var pow10s = Math.pow(10, dec || 0);\r\n    return (dec) ? Math.round(pow10s * num) / pow10s : num;\r\n}\n\n/**\r\n * 获取一组数组中的平均数\r\n * @param  arr 待处理数组\r\n * @param  dec 保留精度\r\n * @return     平均数\r\n */\r\nfunction getNumberAverage(arr, dec) {\r\n    var i = arr.length, sum = 0;\r\n    while (i--) {\r\n        sum += arr[i];\r\n    }\r\n    return getNumberWithDec((sum / arr.length), dec);\r\n}\n\n/**\r\n * 获取一组数组中的方差\r\n * @param  arr 待处理数组\r\n * @param  dec 保留精度\r\n * @return     方差\r\n */\r\nfunction getNumberVariance(arr, dec) {\r\n    var avg = getNumberAverage(arr, dec), i = arr.length, v = 0;\r\n    while (i--) {\r\n        v += Math.pow((arr[i] - avg), 2);\r\n    }\r\n    v /= (arr.length - 1);\r\n    return getNumberWithDec(v, dec);\r\n}\n\n/**\r\n * 获取一组数组中的标准差\r\n * @param  arr  待处理数组\r\n * @param  dec  保留精度\r\n * @return      标准差\r\n */\r\nfunction getStdDeviation(arr, dec) {\r\n    var stdDev = Math.sqrt(getNumberVariance(arr, dec));\r\n    return getNumberWithDec(stdDev, dec);\r\n}\n\nexport { copy, date, each, extend, fix0, getNumberAverage, getNumberVariance, getNumberWithDec, getStdDeviation, is, isArray, isBoolean, isError, isFunction, isNull, isNumber, isObject, isRegexp, isString, isUndefined, isValidArray, labelReplace, labelReplaceExp, merge, numberFormat, queryString, random, serialize, shuffle, toArray, toDate, toUnderlineName };\n//# sourceMappingURL=index.esm.js.map\n","import { isFunction, isNumber, isArray, copy, each, isUndefined } from \"@x-drive/utils\";\n\n/**传递给处理函数的参数对象 */\ntype EventHandlerParam = any;\n\n/**处理函数对象 */\ntype EventSubscribe = {\n    /**从哪个实例发出来的，暂时没用 */\n    from?: string;\n\n    /**消息处理函数 */\n    handler: EventHandler;\n}\n\n/**事件订阅队列 */\ntype EventSubscribeSubject = {\n    name?: EventSubscribe[];\n}\n\ninterface EventHandler extends Function {\n    /**订阅函数 id */\n    eventId?: number;\n\n    /**订阅消息处理函数，返回 false 阻止队列继续执行 */\n    (re?: EventHandlerParam):boolean | void;\n}\n\nclass EventCenter {\n\n    /**订阅函数 id */\n    private EID = 1;\n\n    /**已注册的事件 */\n    private events: EventSubscribeSubject = {};\n\n    /**\n     * 触发事件\n     * @param subscribes 触发事件对应的订阅队列\n     * @param data       需要传递给订阅函数的数据\n     */\n    private fire(subscribes: EventSubscribe[], data?: any[]) {\n        if (isArray(subscribes)) {\n            if (isUndefined(data)) {\n                data = [];\n            }\n            each(subscribes, function (item: EventSubscribe) {\n                if (isFunction(item.handler)) {\n                    return item.handler.apply(\n                        item.handler\n                        , copy(data)\n                    );\n                }\n            }, this);\n        }\n    }\n\n    /**\n     * 订阅\n     * @param name    事件名称\n     * @param handler 处理函数\n     * @returns       订阅函数 id，使用该 id 可以在不传入原有订阅函数的情况下取消事件订阅\n     * @example\n     * ```ts\n     * EventCenter.on(\"test\", (data) => {\n     *     console.log(\"test\");\n     *     console.log(data);\n     * });\n     * ```\n     */\n    on(name: string, handler: EventHandler) {\n        if (name && isFunction(handler)) {\n            if (!this.events[name]) {\n                this.events[name] = [];\n            }\n            var eventId = ++this.EID;\n            handler.eventId = eventId;\n\n            this.events[name].push({\n                handler\n            });\n            return eventId;\n        }\n        return 0;\n    }\n\n    /**\n     * 取消订阅\n     * @param name    订阅事件名称\n     * @param handler 处理函数或要去掉的订阅函数 id\n     * @example\n     * ```ts\n     * // 传入指定的 id 或函数取消某个订阅\n     * EventCenter.off(\"test\", 123);\n     * // 全部取消\n     * EventCenter.off(\"test\");\n     * ```\n     */\n    off(name: string, handler?: Function | number) {\n        if (this.events[name]) {\n            if (handler) {\n                let events: EventSubscribe[] = this.events[name];\n                for (let i = 0; i < events.length; i++) {\n                    if (\n                        (isFunction(handler) && handler === events[i].handler)\n                        || (isNumber(handler) && handler === events[i].handler.eventId)\n                    ) {\n                        events.splice(i, 1);\n                        break;\n                    }\n                }\n            } else {\n                this.events[name] = [];\n            }\n        }\n    }\n\n    /**\n     * 触发指定订阅事件\n     * @param name 订阅事件名称\n     * @param data 订阅事件数据\n     * @example\n     * ```ts\n     * EventCenter.emit(\"test\", \"Nice\");\n     * EventCenter.emit(\"hello\", \"Nice\", \"To\", \"Meet\", \"U\");\n     * ```\n     */\n    emit(name: string, ...data) {\n        if (this.events[name]) {\n            this.fire(\n                this.events[name]\n                , data\n            );\n        }\n    }\n\n}\n\nexport { EventCenter };\n\nconst GlobalEventCenter = new EventCenter();\nexport default GlobalEventCenter;"],"names":[],"mappings":"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"}